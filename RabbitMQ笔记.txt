1，控制台执行命令：rabbitmq-plugins enable rabbitmq_management
	浏览器访问：localhost:15672    超级管理员账户：guest,密码：guest
	本人创建的admin角色账号：wyg123	123456


2，controller方法参数spring怎么赋值的？如下：我们就可以写自己的参数，并且赋值。
	@Configuration
	public class WebConfig  extends WebMvcConfigurerAdapter{
		
		@Autowired
		UserArgumentResolver userArgumentResolver;
		
		//给controller方法的参数赋值的
		@Override
		public void addArgumentResolvers(List<HandlerMethodArgumentResolver> argumentResolvers) {
			argumentResolvers.add(userArgumentResolver);
		}
		
		
	}


	public class UserArgumentResolver implements HandlerMethodArgumentResolver {

		@Autowired
		MiaoshaUserService userService;
		
		public boolean supportsParameter(MethodParameter parameter) {
			//获取参数的类型
			Class<?> clazz = parameter.getParameterType();
			return clazz==MiaoshaUser.class;
		}

		public Object resolveArgument(MethodParameter parameter, ModelAndViewContainer mavContainer,
				NativeWebRequest webRequest, WebDataBinderFactory binderFactory) throws Exception {
			HttpServletRequest request = webRequest.getNativeRequest(HttpServletRequest.class);
			HttpServletResponse response = webRequest.getNativeResponse(HttpServletResponse.class);
			
			String paramToken = request.getParameter(MiaoshaUserService.COOKI_NAME_TOKEN);
			String cookieToken = getCookieValue(request, MiaoshaUserService.COOKI_NAME_TOKEN);
			if(StringUtils.isEmpty(cookieToken) && StringUtils.isEmpty(paramToken)) {
				return null;
			}
			String token = StringUtils.isEmpty(paramToken)?cookieToken:paramToken;
			return userService.getByToken(response, token);
		}

		private String getCookieValue(HttpServletRequest request, String cookiName) {
			Cookie[]  cookies = request.getCookies();
			for(Cookie cookie : cookies) {
				if(cookie.getName().equals(cookiName)) {
					return cookie.getValue();
				}
			}
			return null;
		}

	}

3，redis并发请求： redis-benchmark -h 192.168.0.103 -p 6379 -c 100 -n 100000    100并发100000个请求（以3个字节查询）
		   redis-benchmark -h 192.168.0.103 -p 6379 -q -d 100  以100个字节查询
		   redis-benchmark -t set,lpush -n 100000 -q    (只测试set,lpush命令，发100000此请求)
		   redis-benchmark -n 100000 -q script load "redis.call('set','foo','bar')"   只测引号里的命令


4，把springboot项目打包成war包：
	添加依赖：
	<dependency>
	      <groupId>org.springframework.boot</groupId>
	      <artifactId>spring-boot-starter-validation</artifactId>
	</dependency>

	<build>
		<finalName>${project.artifactId}</finalName>  <!-- 打出war包的名字，引用的是上面的名字 -->
		<plugins>
			<plugin>
				<!-- <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-maven-plugin</artifactId> -->
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-war-plugin</artifactId>
				<configuration>
					<failOnMissingWebXml>false</failOnMissingWebXml>
				</configuration>
			</plugin>
		</plugins>
	</build>

	cmd命令：先跳到当前项目根路径下，然后执行命令 mvn clean package
	
	修改如下
	@SpringBootApplication
	public class MainApplication extends SpringBootServletInitializer{

	    public static void main(String[] args) throws Exception {
		SpringApplication.run(MainApplication.class, args);
	    }

		@Override
		protected SpringApplicationBuilder configure(SpringApplicationBuilder builder) {
			return builder.sources(MainApplication.class);
		}
	    
	    
	}


5，打成jar包：
	添加依赖：
	<groupId>org.springframework.boot</groupId> 
	<artifactId>spring-boot-maven-plugin</artifactId>

	//这个依赖不要了
	<dependency>
	      <groupId>org.springframework.boot</groupId>
	      <artifactId>spring-boot-starter-validation</artifactId>
	</dependency>


	@SpringBootApplication启动类改为正常的模式

	执行 mvn clean package 命令


6，Linux下安装RabbitMQ：
	1，首先安装erlang(一种语言，RabbitMQ依赖它)：
	     1.1：yum install ncurses-devel
	     1.2：/configure --prefix=/usr/local/erlang --with-ssl --enable-threads 
		--enable-smp-support --enable-kernel-poll --enable-hipe --without-javac
	     1.3：make
	     1.4：make install
	     1.5执行erlang：进入/usr/local/erlang20/bin目录，并执行./erl

	2，安装RabbitMQ
		安装python：yum install python -y
		安装simplejson：yum install xmlto -y，然后安装 yum install python-simplejson -y
		解压：
			1：xz -d rabbitmq-server-generic-unix-3.7.15.tar.xz (解压生成.tar文件)
			2：tar xf rabbitmq-server-generic-unix-3.7.15.tar

	3，启动RabbitMQ：
		1，进入sbin目录，执行 ./rabbitmq-server
		2，netstat -nap | grep 5672
	
	执行./rabbitmq-server时可能出现erl：找不到命令的问题，在/etc/profile中设置如下环境变量
		#SET erlang envirment
		export PATH=$PATH:/usr/local/erlang20/bin
		#SET RABBITMQ
		export PATH=$PATH:/usr/local/rabbitmq/rabbitmq_server-3.7.15/sbin

7，RabbitMQ的使用：
	1，Direct模式（最简单的模式）：
	发送：
		@Service
		public class MQSender {

			private static Logger log = LoggerFactory.getLogger(MQSender.class);
			
			@Autowired
			AmqpTemplate amqpTemplate;
			
			public void send(Object message) {
				String msg = RedisService.beanToString(message);
				log.info("send message："+message);
				amqpTemplate.convertAndSend(MQConfig.QUEUE,msg); //指定queue名称
			}
			
		}


	接收：	@Service
		public class MQReceiver {

			private static Logger log = LoggerFactory.getLogger(MQReceiver.class);
			
			@RabbitListener(queues = MQConfig.QUEUE)
			public void receive(String message) {
				log.info("receive message："+message);
			}
		}
	
	其他模式参见项目


8，SpringBoot拦截器的使用：实现 HandlerInterceptorAdapter，可以配合注解来使用。详情参见项目。
	最后别忘了注册拦截器：
	@Configuration
	public class WebConfig  extends WebMvcConfigurerAdapter{
		
		@Autowired
		UserArgumentResolver userArgumentResolver;
		
		@Autowired
		AccessInterceptor accessInterceptor;
		
		//给controller方法的参数赋值的
		@Override
		public void addArgumentResolvers(List<HandlerMethodArgumentResolver> argumentResolvers) {
			argumentResolvers.add(userArgumentResolver);
		}

		@Override
		public void addInterceptors(InterceptorRegistry registry) {
			registry.addInterceptor(accessInterceptor);
			
		}
		
		
	}



9，使用<dependency>
  		<groupId>com.rabbitmq</groupId>
  		<artifactId>amqp-client</artifactId>
  		<version>4.0.2</version>
  	</dependency>
   创建队列


   9.1：队列的简单模式（Simple队列）：
	
	Send：
	public class Send {
		private static final String QUEUE_NAME = "test_simple_queue";
		
		public static void main(String[] args) throws IOException, TimeoutException {
			Connection connection = ConnectionUtil.getConnection();
			//从连接中获取通道
			Channel channel = connection.createChannel();
			//声明队列
			channel.queueDeclare(QUEUE_NAME, false, false, false, null);
			String msg = "hello simple";
			channel.basicPublish("", QUEUE_NAME, null, msg.getBytes());
			System.out.println("--sebd msg" + msg);
			channel.close();
			connection.close();
		}

	}

	Recieve：
	public class Receive {
		private static final String QUEUE_NAME = "test_simple_queue";
		public static void main(String[] args) throws IOException, TimeoutException, ShutdownSignalException, ConsumerCancelledException, InterruptedException {
			Connection connection = ConnectionUtil.getConnection();
			Channel channel = connection.createChannel();
			
			//老版本：定义队列的消费者
	//		QueueingConsumer consumer = new QueueingConsumer(channel);
	//		
	//		//监听队列
	//		channel.basicConsume(QUEUE_NAME, true,consumer);
	//		while (true) {
	//			Delivery delivery = consumer.nextDelivery();
	//			String msg = new String(delivery.getBody());
	//			System.out.println("recieve msg："+msg);
	//		}
			
			
			//新版本
			channel.queueDeclare(QUEUE_NAME, false, false, false, null);
			//定义消费者
			DefaultConsumer consumer = new DefaultConsumer(channel) {
				@Override
				public void handleDelivery(String consumerTag, Envelope envelope, 
						BasicProperties properties, byte[] body)
						throws IOException {
					String msg = new String(body,"utf-8");
					System.out.println("new api recieve：" + msg);
				}
				
			};
			
			//监听队列
			channel.basicConsume(QUEUE_NAME, true,consumer);
			
		}
	}

	上面简单队列的问题是：不能有多个消费者监听，耦合性高。

	9.2 Work queues 工作队列（有多个消费者）：
	    两个消费者产生的结果：
		消费者1：偶数
		消费者2：奇数
		这种方式叫做轮询分发（round-robin）结果就是不管谁忙活着谁清闲，都不会多给一个信息，任务消息总是你一个我一个。
	
	     轮询分发的缺点：队列不知道消费者的能力，会造成浪费。
	

	9.3 使用公平分发（fair dispatch）：消费者必须关闭自动应答  channel.basicConsume(QUEUE_NAME, false,consumer); //第二个参数设为false
		生产者设置如下：
			 //每个消费者 发送确认消息之前，消息队列不发送下一个消息到消费者，一次性处理一个消息。
			//限制发送给同一个消费者不得超过一条消息
			int prefetchCount = 1;
			channel.basicQos(prefetchCount);
	    详细见项目：com.mmr.rabbitmq.workfair包下。	
	     boolean autoAck = false; // true表示自动确认模式，一旦rabbitmq将消息分发给消费者，就会从内从中删除。
	     这种情况下，如果杀死正在执行的消费者，就会丢失正在处理的消息。
	     // false为手动模式，如果有一个消费者挂掉，就会交付给其他消费者。
		rabbitmq支持消息应答，消费者发送一个消息应答。告诉rabbitmq这个消息我已经处理完成，你可以删了，然后rabbitmq
		就删除内存中的消息。
	     channel.basicConsume(QUEUE_NAME, autoAck,consumer);
	     如果rabbitmq挂了，我们的消息任然会消失！！！
	     channel.queueDeclare(QUEUE_NAME, false, false, false, null);  //第二个参数是持久化

	     注意：声明好的队列就不能修改（修改参数）

	9.4 订阅模式：一个生产者多个消费者、每一个消费者都有自己的队列、生产者没有直接把消息发送到队列，而是发送到交换机、
		      每个队列都要绑定到交换机上、生产者发送的消息经过交换机然后到达队列，就能实现一个消息被多个消费者消费。

	    交换机没有存储的能力，在rabbitmq里面只有队列有存储能力，如果交换机没有绑定队列，消息就会丢失。
	    参见项目：com.mmr.rabbitmq.ps包下内容。
	   订阅模式有多种：1， Fanout（不出来路由键）、2，Direct（路由模式）、
	   3，Topic模式：将路由键和某模式匹配，# 匹配一个或者多个，* 匹配一个 参见项目：com.mmr.rabbitmq.topic包下。


10，RabbitMQ的消息确认机制（事务+confirm）  
	在rabbitmq中，我们可以通过持久化数据解决rabbirmq服务器异常的数据丢失问题。
	另外的问题：生产者将消息发送出去之后，消息有没有到达rabbitmq，服务器默认的情况是不知道的。
	
	两种方式：
		AMQP实现了事务机制：降低了mq的吞吐量
		Confirm模式：解决mq的吞吐量问题

	AMQP事务机制：
	txSelect txCommit txRollback
	txSelect：用户将当前channel设置成transation模式
	txCommmit：用于提交事务
	txRollback：回滚事务
	
	Confirm模式：最大的好处在于是异步的，如果出异常会发送Nack消息
		confirm模式开启：channel.confirmSelect()
		编程模式：
		1，普通 发一条	waitForConfirms()
		2，批量的 发一批	waitForConfirms  就是循环批量发送
		3，异步：提供一个回调方法


	